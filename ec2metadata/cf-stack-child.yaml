AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for Project

Parameters:
  ProjectName:
    Type: String
    Default: myproject
    Description: The name of the project.
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3a.micro
    Description: EC2 instance type.
  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: amazonAmi
    Description: The AMI ID for the EC2 instance.
  Ec2InstanceProfile:
    Type: String
    Description: IAM profile ARN for EC2 to assume
    Default: arn:aws:iam::220518010478:instance-profile/SNSAndSQSAndS3AndRDSFullAccess

Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-LaunchTemplate"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !Ref Ec2InstanceProfile
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - Fn::ImportValue: parent-stack-SecGr1
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras enable corretto8
            sudo yum install -y java-21-amazon-corretto-devel
            sudo dnf install mariadb105 -y # install mysql connector, to connect to rds db instance from ec2
            
            # Remove any existing HTTP servers (like Apache or Nginx) if they exist
            sudo yum remove -y httpd
            sudo yum remove -y nginx
            
            # Install AWS CLI if not already installed
            sudo yum install -y awscli
            
            # Install crontab
            sudo yum install -y cronie
            sudo systemctl start crond
            sudo systemctl enable crond
            
            # Create a directory for your application
            mkdir -p /home/ec2-user/app
            sudo chown ec2-user:ec2-user /home/ec2-user/app
            
            # Navigate to the application directory
            cd /home/ec2-user/app
            
            AWS_S3_BUCKET_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-S3BucketName'].Value" --output text)
            AWS_SNS_TOPIC_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-SNSTopicArn'].Value" --output text)
            AWS_SQS_URL=$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-SQSQueueUrl'].Value" --output text)
            SPRING_DATASOURCE_URL="jdbc:mysql://$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-RDSInstanceEndpoint'].Value" --output text):3306/$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-DBName'].Value" --output text)"
            SPRING_DATASOURCE_USERNAME=$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-RDSInstanceUsername'].Value" --output text)
            SPRING_DATASOURCE_PASSWORD=$(aws cloudformation list-exports --query "Exports[?Name=='${ProjectName}-RDSInstancePassword'].Value" --output text)
            echo "export AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME" >> /etc/profile
            echo "export AWS_SNS_TOPIC_ARN=$AWS_SNS_TOPIC_ARN" >> /etc/profile
            echo "export AWS_SQS_URL=$AWS_SQS_URL" >> /etc/profile
            echo "export SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL" >> /etc/profile
            echo "export SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME" >> /etc/profile
            echo "export SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD" >> /etc/profile
            source /etc/profile
            
            # Download your Spring Boot application JAR from S3
            aws s3 cp s3://java-app-returning-region-and-az/ec2metadata-0.0.1-SNAPSHOT.jar .
            
            # Run the Spring Boot application
            java -jar ec2metadata-0.0.1-SNAPSHOT.jar > /home/ec2-user/app/application.log 2>&1 &            
            (crontab -l 2>/dev/null; echo "@reboot java -jar /home/ec2-user/app/ec2metadata-0.0.1-SNAPSHOT.jar > /home/ec2-user/app/application.log 2>&1 &") | crontab -


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: parent-stack-PublicSubnetAId
        - Fn::ImportValue: parent-stack-PublicSubnetBId
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AutoScalingGroup"
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue:
            'Fn::Sub': parent-stack-PublicSubnetAId
        - Fn::ImportValue:
            'Fn::Sub': parent-stack-PublicSubnetBId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-LoadBalancer"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          'Fn::Sub': parent-stack-VPCId
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /metadata
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-TargetGroup"

Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref AutoScalingGroup

