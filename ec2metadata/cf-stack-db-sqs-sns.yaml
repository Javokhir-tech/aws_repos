
AWSTemplateFormatVersion : 2010-09-09
Description: A sample template

Parameters:
  IpAddress:
    Type: String
    Description: The IP address range that can be used to SSH to the EC2 instances
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: The AMI ID for the EC2 instance
  InstanceRole:
    Description: IAM role to attach to the instances
    Type: String

  DBInstanceID:
    Default: mydbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: javaapp
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.m5.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: javokhir-abdullaev-bucket

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC-Network

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCInternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: VPC-PublicSubnet-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: VPC-PublicSubnet-B

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC-RouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC-SecGr1

  InboundRuleHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      CidrIp : 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  InboundRule8080:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080

  InboundRuleHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      CidrIp : 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  InboundRuleSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      CidrIp: !Ref IpAddress
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceTypeParameter
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          sudo yum update -y
          # Install OpenJDK 21
          sudo amazon-linux-extras enable corretto8
          sudo yum install -y java-21-amazon-corretto-devel
          sudo dnf install mariadb105 # install mysql connector, to connect to rds db instance from ec2
          
          # Remove any existing HTTP servers (like Apache or Nginx) if they exist
          sudo yum remove -y httpd
          sudo yum remove -y nginx
          
          # Install AWS CLI if not already installed
          sudo yum install -y awscli
          
          # Install crontab
          sudo yum install -y cronie
          sudo systemctl start crond
          sudo systemctl enable crond
          
          # Create a directory for your application
          mkdir -p /home/ec2-user/app
          sudo chown ec2-user:ec2-user /home/ec2-user/app
          
          # Navigate to the application directory
          cd /home/ec2-user/app
          
          # Download your Spring Boot application JAR from S3
          aws s3 cp s3://java-app-returning-region-and-az/ec2metadata-0.0.1-SNAPSHOT.jar .
          
          # Run the Spring Boot application
          java -jar ec2metadata-0.0.1-SNAPSHOT.jar > /home/ec2-user/app/application.log 2>&1 &
          
          # Ensure the application starts on reboot
          (crontab -l 2>/dev/null; echo "@reboot java -jar /home/ec2-user/app/ec2metadata-0.0.1-SNAPSHOT.jar > /home/ec2-user/app/application.log 2>&1 &") | crontab -


        IamInstanceProfile:
          Arn: !Ref InstanceRole

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: VPC-AutoScalingGroup
          PropagateAtLaunch: true

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      ScalingAdjustment: 1

  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 50
      AlarmDescription: Alarm set fo 50% of CPU utilization
      Period: 60
      AlarmActions:
        - !Ref ScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: ASG
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # or internal
      Subnets:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
        - Key: Name
          Value: VPC-LoadBalancer

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: ALB
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /metadata  # important to set
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299

  MySQLDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MySQL
      EngineVersion: "8.0.33"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: java_queue
      Tags:
        - Key: Name
          Value: VPC-UploadsNotificationQueue

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: java_sns
      Tags:
        - Key: Name
          Value: VPC-UploadsNotificationTopic

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt ALB.DNSName
  QueueURL:
    Description: URL of new Amazon SQS Queue
    Value: !Ref SQSQueue
  TopicArn:
    Description: The ARN of the created SNS topic
    Value: !Ref SNSTopic


